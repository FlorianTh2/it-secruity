datafile=hat line argument, liest lines; eigene filereader klasse
	flow: FileNameInPackage into DataFile into TestFileIO -> GetTests -> TestIterator (inside GetTests)
testfileio=parser für 1 testfile
TestLine=pojo für 1 Zeile, die dann variablen name und value und lineNumber in testFile representiert
GetTests=iterator der regelt z.B. das in einer zeile nicht nur a=0x02234 steht, sondern auch -0.23423

ArithmeticTest extends Lib4Tests
ConvertHexTest extends Lib4Tests
GetTests implements Iterable<HashMap<String, String>>
Lib4Tests {
Mul10Test extends Lib4Tests
public class ShiftLeftTest extends Lib4Tests {
public class TestFileIO implements Iterator {





package tests;

import static org.junit.Assert.*;

import org.junit.Test;

public class test12 {

	@Test
	public void test() {
		fail("Not yet implemented");
	}

}


5->6->8 -> 14
	-> 10 (eingebettet dargestellt in 9)
	-> 11 -> 12 -> 13







    public static int downsizeEBySteps(BigNumber tmp, BigNumber b, int e, BigNumber r)
    {
    	while(_le(r, tmp))
    	{
    		e = e-1;
        	System.out.println("tmp spart: " + tmp.spart + " in dual: " + BigNumber.printBigNumbersDual(tmp));
    		sub(tmp, tmp, b);
		}
    	return e;
    }

tmp spart: 2 in dual: 0000000000000001	0000000001010100	
tmp spart: 2 in dual: 0000000000000001	0000000001001010	
tmp spart: 2 in dual: 0000000000000001	0000000001000000	
tmp spart: 2 in dual: 0000000000000001	0000000000110110	
tmp spart: 2 in dual: 0000000000000001	0000000000101100	
tmp spart: 2 in dual: 0000000000000001	0000000000100010	
tmp spart: 2 in dual: 0000000000000001	0000000000011000	
tmp spart: 2 in dual: 0000000000000001	0000000000001110	
tmp spart: 2 in dual: 0000000000000001	0000000000000100	
tmp spart: 1 in dual: 1111111111111010	
tmp spart: 2 in dual: 00000000000000-1	0000000000010000	
tmp spart: 3 in dual: 00000000000000-1	1111111111111111	0000000000011010	
tmp spart: 4 in dual: 00000000000000-1	1111111111111111	1111111111111111	0000000000100100	
tmp spart: 5 in dual: 00000000000000-1	1111111111111111	1111111111111111	1111111111111111	0000000000101110	
tmp spart: 6 in dual: 00000000000000-1	1111111111111111	1111111111111111	1111111111111111	1111111111111111	0000000000111000	
tmp spart: 7 in dual: 00000000000000-1	1111111111111111	1111111111111111	1111111111111111	1111111111111111	1111111111111111	0000000001000010	
tmp spart: 8 in dual: 00000000000000-1	1111111111111111	1111111111111111	1111111111111111	1111111111111111	1111111111111111	1111111111111111	0000000001001100	
tmp spart: 9 in dual: 00000000000000-1	1111111111111111	1111111111111111	1111111111111111	1111111111111111	1111111111111111	1111111111111111	1111111111111111	0000000001010110	
tmp spart: 10 in dual: 00000000000000-1	1111111111111111	1111111111111111	1111111111111111	1111







tmp spart: 2 in dual: 0000000000000001	0000000010101110	
tmp: 65710
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000010100100	
tmp: 65700
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000010011010	
tmp: 65690
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000010010000	
tmp: 65680
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000010000110	
tmp: 65670
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000001111100	
tmp: 65660
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000001110010	
tmp: 65650
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000001101000	
tmp: 65640
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000001011110	
tmp: 65630
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000001010100	
tmp: 65620
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000001001010	
tmp: 65610
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000001000000	
tmp: 65600
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000000110110	
tmp: 65590
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000000101100	
tmp: 65580
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000000100010	
tmp: 65570
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000000011000	
tmp: 65560
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000000001110	
tmp: 65550
b: 10
tmp spart: 2 in dual: 0000000000000001	0000000000000100	
tmp: 65540
b: 10
tmp spart: 1 in dual: 1111111111111010	
tmp: 65530
b: 10
tmp spart: 2 in dual: 00000000000000-1	0000000000010000	
Exception in thread "main" java.lang.NumberFormatException: For input string: "00000000000000-10000000000010000" under radix 2
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:68)
	at java.base/java.lang.Long.parseLong(Long.java:707)
	at itsecruity.BigNumber._divmod(BigNumber.java:1127)
	at itsecruity.BigNumber.divmod10(BigNumber.java:1308)
	at itsecruity.BigNumber.toString10(BigNumber.java:238)
	at itsecruity.BigNumber.downsizeEBySteps(BigNumber.java:1252)
	at itsecruity.BigNumber._divmod(BigNumber.java:1214)
	at itsecruity.BigNumber.divmod10(BigNumber.java:1308)
	at itsecruity.BigNumber.toString10(BigNumber.java:238)
	at itsecruity.BigIntMain.testMul(BigIntMain.java:70)
	at itsecruity.BigIntMain.main(BigIntMain.java:30)
